# train_model.py
import pandas as pd
import numpy as np
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dropout, Dense
import joblib

# Fetch BTC data
df = yf.download("BTC-USD", start="2020-01-01", interval="1d")
data = df['Close'].values.reshape(-1, 1)

# Scaling
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# Save the scaler
joblib.dump(scaler, "scaler.pkl")

# Time-series windowing
SEQ_LEN = 60
def create_sequences(data, seq_len):
    x, y = [], []
    for i in range(seq_len, len(data)):
        x.append(data[i - seq_len:i, 0])
        y.append(data[i, 0])
    return np.array(x), np.array(y)

X, y = create_sequences(scaled_data, SEQ_LEN)
X = X.reshape(X.shape[0], X.shape[1], 1)

# Train-test split
split = int(0.8 * len(X))
X_train, y_train = X[:split], y[:split]

# Model
model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(SEQ_LEN, 1)),
    Dropout(0.2),
    LSTM(50),
    Dropout(0.2),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')
model.fit(X_train, y_train, epochs=10, batch_size=32)

# Save model
model.save("model.h5")
